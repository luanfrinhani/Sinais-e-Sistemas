# -*- coding: utf-8 -*-
"""Exercicio02_FT_Sinais_LuanSilvaFrinhani.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PIhGxX6c_anQDE9uuxUn_cnMbOb_Mt_J
"""

import numpy as np
import matplotlib.pyplot as plt
from numpy import pi
from numpy.fft import fft, ifft, fftfreq, fftshift
from math import e

#Função degrau com deslocamento
def degrau(t,d,tam):
  x = np.arange(t[0],t[-1]+tam,tam)
  for i in range(len(x)):
    if (x[i]<d):
      x[i] = 0
    else:
      x[i] = 1
  return x

# Letra A
wam = 3000
Tam = (2*pi)/wam
t = np.arange(0,Tam+5,Tam)

x1 = degrau(t,0,Tam) - degrau(t,2,Tam)
x2 = degrau(t,0,Tam) - degrau(t,1,Tam)
x3 = degrau(t,0,Tam) - degrau(t,0.35,Tam)

# Plotando os sinais x1, x2, x3
fig1, ax = plt.subplots(3,1,figsize = (14,14))
ax[0].plot(t, x1)
ax[0].set_ylabel("Amplitude")
ax[0].set_xlabel("tempo [s]")
ax[0].grid()

ax[0].plot(t, x2)
ax[0].set_ylabel("Amplitude")
ax[0].set_xlabel("tempo [s]")
ax[0].grid()

ax[0].plot(t, x3)
ax[0].set_ylabel("Amplitude")
ax[0].set_xlabel("tempo [s]")
ax[0].grid()
fig1.show()


# wam2 = 50
# Tam = (2*pi)/wam2
# t = np.arange(-10,Tam+10,Tam)
N = 2**18

#Fazendo a fft para x1
wam1 = 7500
Tam1 = (2*pi)/wam1
Xf1 = (Tam1*N)*fft(x1,N)/N

w1 = fftfreq(len(Xf1), d=(Tam1))*(2*pi)


wd1 = fftshift(w1)
Xd1 = fftshift(Xf1)

ModX1 = np.abs(Xd1)
phasX1 = np.angle(Xd1)

#Fazendo a fft para x2
Xf2 = (Tam1*N)*fft(x2,N)/N

w2 = fftfreq(len(Xf2), d=(Tam1))*(2*pi)


wd2 = fftshift(w2)
Xd2 = fftshift(Xf2)

ModX2 = np.abs(Xd2)
phasX2 = np.angle(Xd2)

#Fazendo a fft para x3
Xf3 = (Tam1*N)*fft(x3,N)/N

w3 = fftfreq(len(Xf3), d=(Tam1))*(2*pi)


wd3 = fftshift(w3)
Xd3 = fftshift(Xf3)

ModX3 = np.abs(Xd3)
phasX3 = np.angle(Xd3)

# Plotando a magnitude de x1
ax[1].plot(wd1, ModX1, 'b-')
ax[1].set_ylabel("Amplitude")
ax[1].set_xlabel("frequencia [rad/s]")
ax[1].grid()
ax[1].set_xlim(-400, 400)


# Plotando a magnitude de x2
ax[1].plot(wd2, ModX2,'g-')
ax[1].set_ylabel("Amplitude")
ax[1].set_xlabel("frequencia [rad/s]")
ax[1].grid()
ax[1].set_xlim(-400, 400)


# Plotando a magnitude de x3
ax[1].plot(wd3, ModX3, 'r-')
ax[1].set_ylabel("Amplitude")
ax[1].set_xlabel("frequencia [rad/s]")
ax[1].grid()
ax[1].set_xlim(-400, 400)


# Plotando a fase x1
ax[2].stem(wd1, phasX1, 'b-',use_line_collection = True)
ax[2].set_ylabel("Fase")
ax[2].set_xlabel("frequencia [rad/s]")
ax[2].grid()
ax[2].set_xlim(-400, 400)


# Plotando a fase x2
ax[2].stem(wd2, phasX2,use_line_collection = True)
ax[2].set_ylabel("Fase")
ax[2].set_xlabel("frequencia [rad/s]")
ax[2].grid()
ax[2].set_xlim(-400, 400)


# Plotando a fase x3
ax[2].stem(wd3, phasX3,'r-',use_line_collection = True)
ax[2].set_ylabel("Fase")
ax[2].set_xlabel("frequencia [rad/s]")
ax[2].grid()
ax[2].set_xlim(-400, 400)

# Letra B
wam1 = 300
Tam1 = (2*pi)/wam1
t = np.arange(0,Tam1+5,Tam1)

x = np.exp(-t)*degrau(t,0,Tam1)


# Plotando o gráfico de x no tempo 
fig1, ax = plt.subplots()
ax.plot(t, x)
ax.set_ylabel("Amplitude x(t)")
ax.set_xlabel("tempo [s]")
ax.set_xlim(0, 4)
ax.grid()


# Calculando a ft
Xf = (Tam1*N)*fft(x,N)/N

w = fftfreq(len(Xf), d=(Tam1))*(2*pi)


wd = fftshift(w)
Xd = fftshift(Xf)

ModX = np.abs(Xd)
phasX = np.angle(Xd)

# Plotando a amplitude
fig1, ax = plt.subplots()
ax.plot(wd, ModX, 'r-')
ax.set_ylabel("Amplitude")
ax.set_xlabel("frequencia [rad/s]")
ax.grid()
ax.set_xlim(-400, 400)

# Plotando a fase
fig, ax1 = plt.subplots()
ax1.stem(wd, phasX,'g-',use_line_collection = True)
ax1.set_ylabel("Fase")
ax1.set_xlabel("frequencia [rad/s]")
ax1.grid()
ax1.set_xlim(-400, 400)

# Letra C
wam2 = 100*350
Tam2 = (2*pi)/wam2
t = np.arange(0,Tam2+0.35,Tam2)

x = np.sin(350*t)

# Plotando o gráfico de x no tempo 
fig1, ax = plt.subplots()
ax.plot(t, x)
ax.set_ylabel("Amplitude x(t)")
ax.set_xlabel("tempo [s]")
ax.grid()

# Calculando a ft
Xf = (Tam2*N)*fft(x,N)/N

w = fftfreq(len(Xf), d=(Tam2))*(2*pi)


wd = fftshift(w)
Xd = fftshift(Xf)

ModX = np.abs(Xd)
phasX = np.angle(Xd)

# Plotando a amplitude
fig1, ax = plt.subplots()
ax.plot(wd, ModX, 'r-')
ax.set_ylabel("Amplitude")
ax.set_xlabel("frequencia [rad/s]")
ax.grid()
ax.set_xlim(-400, 400)

# Plotando a fase
fig, ax1 = plt.subplots()
ax1.stem(wd, phasX,'g-',use_line_collection = True)
ax1.set_ylabel("Fase")
ax1.set_xlabel("frequencia [rad/s]")
ax1.grid()
ax1.set_xlim(-40, 40)

#Letra D
def tremDeImpulso(t, Tam):
  tremDeImpulso = np.arange(t[0], (t[-1] + t[1]-t[0]), t[1]-t[0])
  
  for i in range(len(tremDeImpulso)):
    if(t[i] % Tam != 0):
      tremDeImpulso[i] = 0
    else:
      tremDeImpulso[i] = 1
  
  return tremDeImpulso

w = 2 
Tam = (2*np.pi) / w
t = np.arange(-20, 20 + Tam/np.pi, Tam/pi)

# Criando o sinal
x = tremDeImpulso(t, 10)

#Plotando o gráfico de x no tempo
fig, ax = plt.subplots(figsize = (12,6))
ax.stem(t, x, 'c-', label="", use_line_collection=True)
ax.set_ylabel("Amplitude")
ax.set_xlabel("t")
ax.set_title('x(t)')
ax.grid()
fig.show()

N = np.power(2, 12)

#Calculo da FT
X = (Tam * N) * fft(x, N) / N

w = fftfreq(len(X), d=(Tam)) * (2 * np.pi)


wd, Xd = fftshift(w), fftshift(X)

# calculando o modulo e a fase
ModX = np.abs(Xd) 
phasX = np.angle(Xd)

#Plotando a amplitude
fig1, ax1 = plt.subplots(figsize = (12,6))
ax1.plot(wd, ModX, 'r-',linewidth=2, label="")
ax1.set_ylabel("Amplitude")
ax1.set_xlabel("rad/s")
ax1.set_title('|Xa(e^jw)|')
ax1.grid()
fig1.show()

#Plotando a fase
fig2, ax2 = plt.subplots(figsize = (12,6))
ax2.stem(wd, phasX, 'r-', label="", use_line_collection=True)
ax2.set_ylabel("Amplitude")
ax2.set_xlabel("rad/s")
ax2.set_title('angle(Xa(e^jw))')
ax2.grid()
fig2.show()



